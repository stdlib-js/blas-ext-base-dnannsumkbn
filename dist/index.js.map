{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/dnannsumkbn.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan\u2013Babu\u0161ka algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift F\u00FCr Angewandte Mathematik Und Mechanik_ 54 (1): 39\u201351. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar flg;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = 0.0;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = 0.0;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ] * N;\n\t\tout[ io+strideOut ] = N;\n\t\treturn out;\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\tout[ io ] = 0.0;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tn = 1;\n\tsum = v;\n\tix += strideX;\n\ti += 1;\n\n\t// In order to preserve the sign of zero which can be lost during compensated summation below, find the first non-zero element...\n\tif ( sum === 0.0 ) {\n\t\tfor ( ; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\tif ( v !== 0.0 ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsum += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t} else {\n\t\tflg = true;\n\t}\n\tc = 0.0;\n\tfor ( ; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = ( flg ) ? sum+c : sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan\u2013Babu\u0161ka algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift F\u00FCr Angewandte Mathematik Und Mechanik_ 54 (1): 39\u201351. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dnannsumkbn = require( './dnannsumkbn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* @module @stdlib/blas-ext-base-dnannsumkbn\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnannsumkbn = require( '@stdlib/blas-ext-base-dnannsumkbn' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnannsumkbn = require( '@stdlib/blas-ext-base-dnannsumkbn' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn.ndarray( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dnannsumkbn;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdnannsumkbn = main;\n} else {\n\tdnannsumkbn = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn;\n\n// exports: { \"ndarray\": \"dnannsumkbn.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAkCnD,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,EAAY,CACzE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAL,EAAKJ,EACAN,GAAK,EACT,OAAAI,EAAKM,CAAG,EAAI,EACZN,EAAKM,EAAGL,CAAU,EAAI,EACfD,EAGR,GADAK,EAAKN,EACAD,IAAY,EAChB,OAAKL,EAAOI,EAAGQ,CAAG,CAAE,GACnBL,EAAKM,CAAG,EAAI,EACZN,EAAKM,EAAGL,CAAU,EAAI,EACfD,IAERA,EAAKM,CAAG,EAAIT,EAAGQ,CAAG,EAAIT,EACtBI,EAAKM,EAAGL,CAAU,EAAIL,EACfI,GAGR,IAAMW,EAAI,EAAGA,EAAIf,IAChBW,EAAIV,EAAGQ,CAAG,EACLZ,EAAOc,CAAE,IAAM,IAFDI,IAKnBN,GAAMP,EAEP,GAAKa,IAAMf,EACV,OAAAI,EAAKM,CAAG,EAAI,EACZN,EAAKM,EAAGL,CAAU,EAAI,EACfD,EAQR,GANAU,EAAI,EACJP,EAAMI,EACNF,GAAMP,EACNa,GAAK,EAGAR,IAAQ,EACZ,KAAQQ,EAAIf,EAAGe,IAAM,CAEpB,GADAJ,EAAIV,EAAGQ,CAAG,EACLZ,EAAOc,CAAE,IAAM,GAAQ,CAC3B,GAAKA,IAAM,EAAM,CAChBH,EAAM,GACN,KACD,CACAD,GAAOI,EACPG,GAAK,CACN,CACAL,GAAMP,CACP,MAEAM,EAAM,GAGP,IADAK,EAAI,EACIE,EAAIf,EAAGe,IACdJ,EAAIV,EAAGQ,CAAG,EACLZ,EAAOc,CAAE,IAAM,KACnBC,EAAIL,EAAMI,EACLb,EAAKS,CAAI,GAAKT,EAAKa,CAAE,EACzBE,GAAMN,EAAIK,EAAKD,EAEfE,GAAMF,EAAEC,EAAKL,EAEdA,EAAMK,EACNE,GAAK,GAENL,GAAMP,EAEP,OAAAE,EAAKM,CAAG,EAAMF,EAAQD,EAAIM,EAAIN,EAC9BH,EAAKM,EAAGL,CAAU,EAAIS,EACfV,CACR,CAKAR,EAAO,QAAUG,IC/IjB,IAAAiB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAgCd,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAAKC,EAAY,CACrD,OAAON,EAASE,EAAGC,EAAGC,EAASL,EAAeG,EAAGE,CAAQ,EAAGC,EAAKC,EAAWP,EAAe,EAAGO,CAAU,CAAE,CAC3G,CAKAR,EAAO,QAAUG,IC9DjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAc,IACdC,EAAU,IAKdF,EAAaC,EAAa,UAAWC,CAAQ,EAK7CH,EAAO,QAAUE,ICcjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAcD,EAEdC,EAAcC,EAMf,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "isnan", "abs", "dnannsumkbn", "N", "x", "strideX", "offsetX", "out", "strideOut", "offsetOut", "sum", "flg", "ix", "io", "v", "t", "c", "n", "i", "require_dnannsumkbn", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "dnannsumkbn", "N", "x", "strideX", "out", "strideOut", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dnannsumkbn", "ndarray", "join", "tryRequire", "isError", "main", "dnannsumkbn", "tmp"]
}
