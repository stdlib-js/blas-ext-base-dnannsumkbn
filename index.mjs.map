{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dnannsumkbn.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar flg;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = 0.0;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = 0.0;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ] * N;\n\t\tout[ io+strideOut ] = N;\n\t\treturn out;\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\tout[ io ] = 0.0;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tn = 1;\n\tsum = v;\n\tix += strideX;\n\ti += 1;\n\n\t// In order to preserve the sign of zero which can be lost during compensated summation below, find the first non-zero element...\n\tif ( sum === 0.0 ) {\n\t\tfor ( ; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\tif ( v !== 0.0 ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsum += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t} else {\n\t\tflg = true;\n\t}\n\tc = 0.0;\n\tfor ( ; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = ( flg ) ? sum+c : sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dnannsumkbn from './dnannsumkbn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n"],"names":["dnannsumkbn","N","x","strideX","offsetX","out","strideOut","offsetOut","sum","flg","ix","io","v","t","c","n","i","isnan","abs","ndarray","stride2offset","setReadOnly"],"mappings":";;+ZAyDA,SAASA,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,GAC7D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAL,EAAKJ,EACAN,GAAK,EAGT,OAFAI,EAAKM,GAAO,EACZN,EAAKM,EAAGL,GAAc,EACfD,EAGR,GADAK,EAAKN,EACY,IAAZD,EACJ,OAAKc,EAAOf,EAAGQ,KACdL,EAAKM,GAAO,EACZN,EAAKM,EAAGL,GAAc,EACfD,IAERA,EAAKM,GAAOT,EAAGQ,GAAOT,EACtBI,EAAKM,EAAGL,GAAcL,EACfI,GAGR,IAAMW,EAAI,EAAGA,EAAIf,IAChBW,EAAIV,EAAGQ,IACa,IAAfO,EAAOL,IAFOI,IAKnBN,GAAMP,EAEP,GAAKa,IAAMf,EAGV,OAFAI,EAAKM,GAAO,EACZN,EAAKM,EAAGL,GAAc,EACfD,EAQR,GANAU,EAAI,EAEJL,GAAMP,EACNa,GAAK,EAGQ,KALbR,EAAMI,GAML,KAAQI,EAAIf,EAAGe,IAAM,CAEpB,GADAJ,EAAIV,EAAGQ,IACa,IAAfO,EAAOL,GAAgB,CAC3B,GAAW,IAANA,EAAY,CAChBH,GAAM,EACN,KACA,CACDD,GAAOI,EACPG,GAAK,CACL,CACDL,GAAMP,CACN,MAEDM,GAAM,EAGP,IADAK,EAAI,EACIE,EAAIf,EAAGe,IACdJ,EAAIV,EAAGQ,IACa,IAAfO,EAAOL,KACXC,EAAIL,EAAMI,EACLM,EAAKV,IAASU,EAAKN,GACvBE,GAAMN,EAAIK,EAAKD,EAEfE,GAAMF,EAAEC,EAAKL,EAEdA,EAAMK,EACNE,GAAK,GAENL,GAAMP,EAIP,OAFAE,EAAKM,GAAO,EAAUH,EAAIM,EAAIN,EAC9BH,EAAKM,EAAGL,GAAcS,EACfV,CACR,CCnFA,SAASL,EAAaC,EAAGC,EAAGC,EAASE,EAAKC,GACzC,OAAOa,EAASlB,EAAGC,EAAGC,EAASiB,EAAenB,EAAGE,GAAWE,EAAKC,EAAWc,EAAe,EAAGd,GAC/F,CC5BAe,EAAArB,EAAA,UAAAmB"}